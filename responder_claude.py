#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sqlite3
import base64
import anthropic

from config import (
    USER_DAILY_LIMIT,
    BOT_DAILY_LIMIT,
    ANTHROPIC_API_KEY,
    OWNER_ID,
    SYSTEM_USER_IDS,
    TRUSTED_CHANNELS,
    get_current_time,
)

client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)

DB_PATH = os.path.join(os.getcwd(), "group_history.db")
PROMPT_PATH = os.path.join("data", "claude_prompt.txt")

# üîπ –ö–∞—Ä—Ç–∞ —è—Ä–ª—ã–∫–æ–≤ interest.py ‚Üí —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ Anthropic
MODEL_MAP = {
    "FUN": "claude-3-5-haiku-20241022",
    "SMART": "claude-sonnet-4-5-20250929",
}

# fallback –¥–ª—è —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏
MODEL_MAIN = "claude-sonnet-4-20250514"
MODEL_FALLBACK = "claude-3-5-haiku-20241022"


def get_db_connection():
    return sqlite3.connect(DB_PATH)


def user_daily_count(user_id, chat_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT COUNT(*) FROM history
        WHERE chat_id = ?
          AND role = 'assistant'
          AND date(created) = date('now')
          AND reply_to_user_id = ?
        """,
        (chat_id, user_id),
    )
    count = cursor.fetchone()[0]
    conn.close()
    return count


def get_total_daily_count():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT COUNT(*) FROM history
        WHERE role = 'assistant'
          AND date(created) = date('now')
        """
    )
    count = cursor.fetchone()[0]
    conn.close()
    return count


def load_system_prompt():
    with open(PROMPT_PATH, "r", encoding="utf-8") as f:
        return f.read()


def get_chat_history(chat_id, limit=15):
    """–ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–æ 15)."""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT role, first_name, content, is_interesting, source
        FROM history
        WHERE chat_id = ?
        ORDER BY created DESC
        LIMIT ?
        """,
        (chat_id, limit),
    )
    rows = cursor.fetchall()
    conn.close()

    history = []
    for role, name, content, is_interesting, source in reversed(rows):
        if not content:
            continue

        if is_interesting == 1:
            interest_text = "(‚ú® –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ)"
        elif is_interesting == 0:
            interest_text = "(üò¥ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ)"
        else:
            interest_text = "(–±–µ–∑ –æ—Ü–µ–Ω–∫–∏)"

        if role == "assistant":
            history.append({"role": "assistant", "content": content})
        else:
            history.append({
                "role": "user",
                "content": f"{name}: {content} {interest_text}"
            })

    return history


def is_exempt_from_limits(user_id, msg=None):
    if not user_id:
        return False
    if user_id in SYSTEM_USER_IDS:
        return True
    if user_id == 136817688 and msg and msg.sender_chat:
        return msg.sender_chat.id in TRUSTED_CHANNELS
    return False


def choose_model(image_path=None):
    if image_path:
        return MODEL_MAIN
    return MODEL_FALLBACK


def encode_image(image_path):
    with open(image_path, "rb") as f:
        return base64.b64encode(f.read()).decode("utf-8")


def generate_response(
    chat_id,
    current_user=None,
    user_id=None,
    text=None,
    image_path=None,
    msg=None,
    web_summary=None,
    forced_model=None
):
    # --- –ª–∏–º–∏—Ç—ã ---
    if user_id and not is_exempt_from_limits(user_id, msg) and user_id != OWNER_ID:
        if user_daily_count(user_id, chat_id) >= USER_DAILY_LIMIT:
            print(f"‚õî –õ–∏–º–∏—Ç {USER_DAILY_LIMIT} –æ—Ç–≤–µ—Ç–æ–≤/—Å—É—Ç–∫–∏ –¥–ª—è user_id={user_id}")
            return None

    # --- —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ---
    system_prompt = load_system_prompt()
    system_prompt = (
        f"{system_prompt}\n\n"
        f"‚ö°Ô∏è –°–µ–π—á–∞—Å {get_current_time()} (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ù–µ–π—Ä–æ–ö–æ—Ç–∞).\n\n"
        "‚ÄºÔ∏è –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –∏–º–µ–Ω–Ω–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏. "
        "–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–ø–ª–∏–∫–∏ —É—á–∏—Ç—ã–≤–∞–π —Ç–æ–ª—å–∫–æ –∫–∞–∫ —Ñ–æ–Ω."
    )

    history = get_chat_history(chat_id)

    # üîπ web_summary –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º
    if web_summary:
        system_prompt += (
            "\n\nüìå –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–≠—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –¥–ª—è –æ—Ç–≤–µ—Ç–∞. "
            "–ù–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ç–∏.\n"
            f"{web_summary.strip()}"
        )

    # üì∑ –µ—Å–ª–∏ —Ñ–æ—Ç–æ
    if image_path:
        base64_img = encode_image(image_path)
        user_content = [
            {
                "type": "image",
                "source": {"type": "base64", "media_type": "image/jpeg", "data": base64_img},
            }
        ]
        if text:
            user_content.append({"type": "text", "text": f"‚ÄºÔ∏è –í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å: {text}"})
        else:
            user_content.append({"type": "text", "text": f"‚ÄºÔ∏è –í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å: [–§–æ—Ç–æ]"})
        history.append({"role": "user", "content": user_content})
    else:
        if current_user and text:
            history.append({
                "role": "user",
                "content": f"‚ÄºÔ∏è –í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å: {current_user}: {text}"
            })

    # --- –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ---
    if forced_model and forced_model in MODEL_MAP:
        model = MODEL_MAP[forced_model]
    else:
        model = choose_model(image_path)

    try:
        print("=== PROMPT TO CLAUDE ===")
        print("SYSTEM:", system_prompt[:400], "...\n")
        for h in history[-10:]:
            print(f"{h['role'].upper()}: {str(h['content'])[:200]} ...")

        response = client.messages.create(
            model=model,
            max_tokens=800,
            temperature=0.7,
            system=system_prompt,
            messages=history,
        )
        answer = "".join([block.text for block in response.content if block.type == "text"]).strip()
        print(f"=== RAW CLAUDE RESPONSE ({model}) ===\n{answer}\n")
        return answer
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Claude API: {e}")
        return None

