#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import sqlite3
import json
import asyncio
from openai import AsyncOpenAI
from telegram import Update
from telegram.ext import ContextTypes
from config import OWNER_ID, OPENAI_API_KEY, get_current_time

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

DB_PATH = os.path.join(os.getcwd(), "group_history.db")
PROMPT_FILE = os.path.join("data", "interest_prompt.txt")

# ‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ (Telegram)
ALLOWED_REACTIONS = ["üëç","üëé","‚ù§Ô∏è","üî•","ü•∞","üòÅ","ü§î","üò¢","üò±","ü§¨","üéâ","üôè"]


def load_prompt():
    with open(PROMPT_FILE, "r", encoding="utf-8") as f:
        return f.read()


def get_db_connection():
    return sqlite3.connect(DB_PATH)


def get_recent_messages(chat_id: int, limit: int = 3):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT user_id, role, content, created
        FROM history
        WHERE chat_id = ?
        ORDER BY created DESC
        LIMIT ?
    """, (chat_id, limit))
    rows = cur.fetchall()
    conn.close()
    return rows[::-1]


def _is_channel_message(msg) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –∫–∞–Ω–∞–ª–æ–º (–Ω–∞–ø–∏—Å–∞–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ)."""
    try:
        if getattr(msg, "is_automatic_forward", False):
            return True
        if getattr(msg, "forward_origin", None) and getattr(msg.forward_origin, "chat", None):
            return True
        if getattr(msg, "forward_from_chat", None):
            return True
        if getattr(msg, "sender_chat", None):
            sc = msg.sender_chat
            if sc and getattr(sc, "type", None) == "channel":
                return True
    except Exception:
        pass
    return False


def _strip_photo_prefix(text: str) -> str:
    return re.sub(r"^üì∑\s*–§–æ—Ç–æ\.\s*–ü–æ–¥–ø–∏—Å—å:\s*", "", text or "", flags=re.IGNORECASE).strip()


def _pick_model_heuristic(text: str) -> str:
    """
    –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø–æ —Å—Ç–∏–ª—é/—Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "FUN" –∏–ª–∏ "SMART".
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –∫–∞–∫ fallback, –µ—Å–ª–∏ GPT –Ω–µ –≤–µ—Ä–Ω—É–ª MODEL –∏–ª–∏ JSON —Å–ª–æ–º–∞–Ω.
    """
    if not text:
        return "FUN"

    t = _strip_photo_prefix(text)
    low = t.lower()

    humour_markers = ["))", ")))", "üòÇ", "ü§£", "üòÖ", "–∞—Ö–∞—Ö", "–ª–æ–ª", "–∫–µ–∫", "—à—É—Ç–∫", "–¥—É—Ä–∞—á"]
    if any(m in low for m in humour_markers):
        return "FUN"

    words = re.findall(r"\w+", low, flags=re.UNICODE)
    if len(words) <= 6:
        return "FUN"

    complex_kw = [
        "–ø–æ—á–µ–º—É", "–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–æ–±—ä—è—Å–Ω–∏", "–¥–æ–∫–∞–∂", "—Ç–µ–æ—Ä–∏—è", "–∞–ª–≥–æ—Ä–∏—Ç–º", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä",
        "–æ–ø—Ç–∏–º–∏–∑–∞—Ü", "—Ä–µ–≥—Ä–µ—Å—Å", "–≥—Ä–∞–¥–∏–µ–Ω—Ç", "–∏–Ω—Ñ–µ—Ä–µ–Ω—Å", "–æ–±—É—á–µ–Ω", "—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞", "–≥–µ–Ω–µ—Ä–∞—Ü",
        "nlp", "llm", "–±–∞–π–µ—Å", "—ç–Ω—Ç—Ä–æ–ø", "–∫–æ—Ä—Ä–µ–ª—è—Ü", "–∫–∞—É–∑–∞–ª—å", "–ø—Ä–∏—á–∏–Ω", "—Å–ª–µ–¥—Å—Ç–≤",
        "—Å—Ä–∞–≤–Ω–∏", "–æ—Ü–µ–Ω", "–ø–ª–∞–Ω", "—Å—Ç—Ä–∞—Ç–µ–≥", "–¥–∏–∑–∞–π–Ω", "proof", "theorem", "complexit",
        "np-", "p=", "–∞—Å–∏–º–ø—Ç–æ—Ç", "–º–∞—Ç–µ–º–∞—Ç"
    ]
    has_complex_kw = any(k in low for k in complex_kw)
    has_question = "?" in t

    if len(words) > 20 and (has_complex_kw or has_question):
        return "SMART"

    code_markers = ["```", "def ", "class ", "SELECT ", "INSERT ", "http://", "https://"]
    if any(m in t for m in code_markers):
        return "SMART"

    return "FUN"


async def analyze_message(message_text: str, chat_id: int = None, msg=None):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ: INTEREST, REACTION, SEARCH, QUERY, MODEL
    GPT ‚Äî –≥–ª–∞–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ—à–µ–Ω–∏—è; —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∞–∫ fallback.
    """
    channel_hint = bool(msg and _is_channel_message(msg))

    system_prompt = load_prompt()
    system_prompt = f"{system_prompt}\n\n‚ö°Ô∏è –°–µ–π—á–∞—Å {get_current_time()} (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ù–µ–π—Ä–æ–ö–æ—Ç–∞)."

    history_text = ""
    if chat_id:
        history = get_recent_messages(chat_id, limit=3)
        history_text = "\n".join([f"[{row[3]}] user_id={row[0]} role={row[1]}: {row[2]}" for row in history])

    resp = await client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0,
        messages=[
            {"role":"system","content":system_prompt},
            {"role":"system","content":f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{history_text}"},
            {"role":"user","content":message_text},
        ]
    )

    raw = resp.choices[0].message.content.strip()
    if os.environ.get("SHOW_RAW", "").strip() == "1":
        print("\nüîé RAW GPT ANSWER:", raw)

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    result = {"INTEREST":"NO","REACTION":["ü§î"],"SEARCH":"NO","QUERY":"","MODEL":"FUN"}

    # –°–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é Markdown-–æ–±—ë—Ä—Ç–∫—É
    clean = raw.strip()
    if clean.startswith("```"):
        clean = clean.strip("`").strip()
        if clean.lower().startswith("json"):
            clean = clean[4:].strip()

    parsed = None
    try:
        parsed = json.loads(clean)
        if isinstance(parsed, dict):
            # ‚úÖ –¥–æ–≤–µ—Ä—è–µ–º GPT, —Ç–æ–ª—å–∫–æ —á—É—Ç—å –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–æ—Ä–º–µ
            reactions = parsed.get("REACTION", [])
            clean_reactions = [r for r in reactions if r in ALLOWED_REACTIONS] or ["ü§î"]
            parsed["REACTION"] = clean_reactions[:1]

            if parsed.get("SEARCH") == "YES" and not parsed.get("QUERY"):
                parsed["QUERY"] = _strip_photo_prefix(message_text)

            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ ‚Äî —Ä–µ—à–∏–º —ç–≤—Ä–∏—Å—Ç–∏–∫–æ–π
            if parsed.get("MODEL") not in ("SMART", "FUN"):
                parsed["MODEL"] = _pick_model_heuristic(message_text or "")

            result.update(parsed)
        else:
            # –Ω–µ —Å–ª–æ–≤–∞—Ä—å ‚Üí fallback
            result["MODEL"] = _pick_model_heuristic(message_text or "")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        # –ø–æ–ª–Ω–æ—Å—Ç—å—é fallback
        result["MODEL"] = _pick_model_heuristic(message_text or "")

    if channel_hint:
        result["INTEREST"] = "YES"

    return result


def format_author_info(msg):
    if msg and msg.sender_chat:
        title = msg.sender_chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        cid = msg.sender_chat.id
        uname = f"@{msg.sender_chat.username}" if msg.sender_chat.username else "@None"
        return f"–ö–∞–Ω–∞–ª: {title} ({uname}, ID: {cid})"
    elif msg and msg.from_user:
        name = msg.from_user.first_name or "?"
        uname = f"@{msg.from_user.username}" if msg.from_user.username else "@None"
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} ({uname}, ID: {msg.from_user.id})"
    else:
        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"


async def report_interest(update: Update, context: ContextTypes.DEFAULT_TYPE, result: dict):
    """–®–ª—ë—Ç –∞–¥–º–∏–Ω—É –æ—Ç—á—ë—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏ + —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –≤ –ë–î."""
    msg = update.message
    if not msg:
        return

    chat_id = msg.chat.id
    message_id = msg.message_id
    text = msg.text or msg.caption or "[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"

    interesting = (result.get("INTEREST") == "YES")
    reactions = result.get("REACTION", [])

    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        UPDATE history
        SET is_interesting = ?, reaction = ?
        WHERE chat_id = ? AND message_id = ?
    """, (1 if interesting else 0, ",".join(reactions), chat_id, message_id))
    conn.commit()
    conn.close()

    status = "‚ú® –ò–ù–¢–ï–†–ï–°–ù–û–ï" if interesting else "üò¥ –ù–ï–ò–ù–¢–ï–†–ï–°–ù–û–ï"
    preview = text if len(text) <= 400 else text[:400] + "‚Ä¶"
    msg_info = (
        f"{status} —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ {chat_id}\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {format_author_info(msg)}\n\n"
        f"–¢–µ–∫—Å—Ç: {preview}\n"
        f"üü¢ –†–µ–∞–∫—Ü–∏—è: {reactions}\n"
        f"üåç –ü–æ–∏—Å–∫: {result.get('SEARCH')} | –ó–∞–ø—Ä–æ—Å: {result.get('QUERY') or '‚Äî'}\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('MODEL')}"
    )

    if not interesting:
        try:
            await context.bot.send_message(chat_id=OWNER_ID, text=msg_info)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")


# ==============================
# üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Å –ú–ù–û–ì–û–°–¢–†–û–ß–ù–´–ú –≤–≤–æ–¥–æ–º
# ==============================
def _read_multiline() -> str:
    """
    –ß–∏—Ç–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ stdin.
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:
      ‚Ä¢ –î–í–ï –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ä—è–¥, –∏–ª–∏
      ‚Ä¢ —Å—Ç—Ä–æ–∫–∞ 'END' / 'EOF', –∏–ª–∏
      ‚Ä¢ EOF (Ctrl+D/Ctrl+Z).
    –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.
    """
    print(
        "\n(–≤–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å: –¥–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥—Ä—è–¥, –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ END/EOF, –∏–ª–∏ Ctrl+D)\n"
    )
    lines = []
    empty_streak = 0
    try:
        while True:
            line = input()
            if line in ("END", "EOF"):
                break
            if line == "":
                empty_streak += 1
                if empty_streak >= 2:
                    break
                # –æ–¥–∏–Ω–æ—á–Ω–∞—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –∞–±–∑–∞—Ü –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞
                lines.append("")
                continue
            empty_streak = 0
            lines.append(line)
    except EOFError:
        pass
    # —É–±–∏—Ä–∞–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    while lines and lines[-1] == "":
        lines.pop()
    return "\n".join(lines).strip()


if __name__ == "__main__":
    async def main():
        print("üòº –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –ù–µ–π—Ä–æ–ö–æ—Ç–∞. –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ 'exit' –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏).")
        while True:
            head = input("\nüí¨ –ù–∞—á–Ω–∏ –≤–≤–æ–¥ (–ø—É—Å—Ç–æ = –Ω–∞—á–∞—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ä–µ–∂–∏–º, 'exit' = –≤—ã–π—Ç–∏): ").strip()
            if head.lower() == "exit":
                print("üêæ –í—ã—Ö–æ–¥.")
                break
            if head == "":
                text = _read_multiline()
            else:
                text = head

            if not text:
                # –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏ ‚Äî —Å–Ω–æ–≤–∞ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º
                continue

            result = await analyze_message(text)
            print("\n‚ú® –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
            print(json.dumps(result, ensure_ascii=False, indent=2))

    asyncio.run(main())
