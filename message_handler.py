#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import os
import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

from moderator import moderate_message
from photo_responder import analyze_photo
from responder_claude import generate_response
from prompt_updater import check_and_update_prompt
from config import ALLOWED_GROUPS, OWNER_ID
from interest import analyze_message, report_interest
from web_search import search_and_summarize
import pprint

DB_PATH = os.path.join(os.getcwd(), "group_history.db")
PHOTO_DIR = os.path.join(os.getcwd(), "channel_pics")


def get_db_connection():
    return sqlite3.connect(DB_PATH)


def save_message(
    chat_id,
    message_id,
    user_id,
    username,
    role,
    content,
    reply_to_user_id=None,
    source=None,
):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î (—Ç–∞–±–ª–∏—Ü–∞ history –≤ group_history.db).
    """
    conn = get_db_connection()
    try:
        cursor = conn.cursor()
        cursor.execute(
            """
            INSERT INTO history (chat_id, message_id, user_id, first_name, role, created, content, reply_to_user_id, source)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (
                chat_id,
                message_id,
                user_id,
                username,
                role,
                datetime.now(),
                content,
                reply_to_user_id,
                source,
            ),
        )
        conn.commit()
    finally:
        conn.close()


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    msg = update.message
    if not msg:
        return

    chat_id = msg.chat_id
    if chat_id not in ALLOWED_GROUPS:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã

    # --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ ---
    is_ok = await moderate_message(update, context)
    if not is_ok:
        return

    # --- 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è ---
    user_id = msg.from_user.id if msg.from_user else None
    username = (
        msg.from_user.first_name
        if msg.from_user
        else (msg.sender_chat.title if msg.sender_chat else "anon")
    )

    # --- 3. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ ---
    text = msg.text or msg.caption or ""
    image_path = None
    vision_description = None

    if msg.photo or msg.document:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        os.makedirs(PHOTO_DIR, exist_ok=True)

        if msg.photo:
            file_obj = await msg.photo[-1].get_file()
            filename = os.path.join(PHOTO_DIR, f"{msg.message_id}.jpg")
        else:
            file_obj = await msg.document.get_file()
            ext = (
                os.path.splitext(msg.document.file_name)[-1]
                if msg.document.file_name
                else ".jpg"
            )
            filename = os.path.join(PHOTO_DIR, f"{msg.message_id}{ext}")

        await file_obj.download_to_drive(custom_path=filename)
        print(f"üì∑ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        image_path = filename

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
        if text:
            user_content = f"üì∑ –§–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å: {text}"
        else:
            user_content = "üì∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ"
        save_message(chat_id, msg.message_id, user_id, username, "user", user_content)

        # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ (vision –º–æ–¥–µ–ª—å)
        vision_description = await asyncio.to_thread(analyze_photo, filename)
        if vision_description:
            vision_content = f"üîé –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ: {vision_description}"
            save_message(chat_id, msg.message_id, user_id, username, "vision", vision_content)

    else:
        # --- –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ---
        role = "user"
        if msg.from_user and msg.from_user.is_bot:
            if msg.from_user.id == context.bot.id:
                role = "assistant"
        save_message(chat_id, msg.message_id, user_id, username, role, text)

    # --- 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ø–¥–µ–π—Ç–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ ---
    await check_and_update_prompt(context)

    if not text.strip() and not image_path:
        return  # –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí –∏–≥–Ω–æ—Ä

    # --- 5. –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç–∏ ---
    if image_path:
        message_text = f"üì∑ –§–æ—Ç–æ. –ü–æ–¥–ø–∏—Å—å: {text or '–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}"
    else:
        message_text = text

    result = await analyze_message(message_text, chat_id, msg=msg)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await report_interest(update, context, result)

    interesting = result.get("INTEREST") == "YES"

    # --- 6. –õ–æ–≥–∏–∫–∞ "—Ä–µ–ø–ª–∞–π –∫–æ—Ç—É" ---
    # –†–∞–Ω—å—à–µ: –±–æ—Ç –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–ª, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–ª–∞–π –∫ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—é.
    # –¢–µ–ø–µ—Ä—å: –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä–µ–ø–ª–∞–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ.
    must_answer = (
        msg.reply_to_message
        and msg.reply_to_message.from_user
        and msg.reply_to_message.from_user.is_bot
        and interesting  # –∫–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    )

    # --- 7. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –Ω–µ —Ä–µ–ø–ª–∞–π ‚Üí –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ---
    if not interesting and not must_answer:
        return

    # --- 8. –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å) ---
    if result.get("REACTION"):
        try:
            reaction = result["REACTION"][0]  # —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è
            await context.bot.set_message_reaction(
                chat_id=chat_id,
                message_id=msg.message_id,
                reaction=reaction,
            )
            print(f"‚úÖ –†–µ–∞–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {reaction}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

    # --- 9. –í–µ–±-–ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω) ---
    web_summary = None
    if result.get("SEARCH") == "YES":
        query = result.get("QUERY") or text
        print(f"üåç –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–±-–ø–æ–∏—Å–∫: {query}")
        try:
            web_summary, sources = await asyncio.wait_for(
                search_and_summarize(query, num_results=5),
                timeout=20,
            )

            # –õ–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            print("=== WEB SUMMARY (debug) ===")
            print(web_summary)
            print("=== SOURCES (debug) ===")
            print(sources)

            if sources:
                web_summary += "\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(f"- {s}" for s in sources[:5])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫
            save_message(
                chat_id,
                msg.message_id,
                0,
                "Neurocat",
                "assistant",
                web_summary,
                source="web",
            )

        except asyncio.TimeoutError:
            print("‚ö†Ô∏è –ü–æ–∏—Å–∫ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏")
            web_summary = "‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–æ–≤—Ä–µ–º—è."
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: {e}")
            web_summary = None

    # --- 10. –û—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É ---
    try:
        report_lines = [
            "üîé RAW GPT ANSWER:",
            f"{result}",
            "",
            "‚ú® –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê –°–û–û–ë–©–ï–ù–ò–Ø",
            f"–ì—Ä—É–ø–ø–∞: {chat_id}",
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {username} (ID: {user_id})",
            f"–¢–µ–∫—Å—Ç: {text or '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]'}",
            f"–°—Ç–∞—Ç—É—Å: {'–†–ï–ü–õ–ê–ô –ö–û–¢–£ ‚Äî –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ) ‚úÖ' if must_answer else ('–ò–ù–¢–ï–†–ï–°–ù–û ‚úÖ' if interesting else '–ù–ï–ò–ù–¢–ï–†–ï–°–ù–û ‚ùå')}",
            f"üü¢ –†–µ–∞–∫—Ü–∏—è: {result.get('REACTION')}",
            f"üåç –ü–æ–∏—Å–∫: {result.get('SEARCH')} | –ó–∞–ø—Ä–æ—Å: {result.get('QUERY') or '‚Äî'}",
            f"ü§ñ –ú–æ–¥–µ–ª—å: {result.get('MODEL')}",
        ]

        if web_summary:
            report_lines.append("\nüåç –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ò–°–ö–ê:")
            report_lines.append(web_summary)

        report_text = "\n".join(report_lines)

        # Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ = 4096 —Å–∏–º–≤–æ–ª–æ–≤ ‚Üí —Ä–µ–∂–µ–º –ø–æ 3500
        MAX_LEN = 3500
        for i in range(0, len(report_text), MAX_LEN):
            await context.bot.send_message(
                chat_id=OWNER_ID,
                text=report_text[i:i+MAX_LEN]
            )

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")

    # --- 11. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude ---
    answer = generate_response(
        chat_id,
        current_user=username,
        user_id=user_id,
        text=text,
        image_path=image_path,
        msg=msg,
        web_summary=web_summary,
        forced_model=result.get("MODEL"),
    )
    if answer:
        await msg.reply_text(answer, reply_to_message_id=msg.message_id)

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∫–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        try:
            save_message(
                chat_id,
                msg.message_id,
                0,
                "Neurocat",
                "assistant",
                answer,
                reply_to_user_id=user_id,
                source="claude",
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ç–∞: {e}")
