#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler

from insult_detect import insult_detect, load_prompt
from config import OWNER_ID

TRUSTED_FILE = os.path.join("data", "trusted_users.json")
PROMPT_FILE = os.path.join("data", "moderation_prompt.txt")


# ------------------ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ------------------

def load_trusted_users():
    if not os.path.exists(TRUSTED_FILE):
        return {"users": [], "chats": [], "usernames": []}
    with open(TRUSTED_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_trusted_users(data):
    try:
        with open(TRUSTED_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è trusted.json: {e}")
        return False


# ------------------ –º–æ–¥–µ—Ä–∞—Ü–∏—è ------------------

async def moderate_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–ø–∞–º/–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å, False –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å."""

    chat_id = update.message.chat.id
    message_id = update.message.message_id
    sender = update.message.from_user
    sender_id = sender.id if sender else None
    sender_name = sender.first_name if sender else "?"
    sender_username = f"@{sender.username}" if sender and sender.username else "@None"

    trusted = load_trusted_users()

    # --- –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏/—á–∞—Ç—ã ---
    if (
        sender_id in trusted["users"]
        or sender_username in trusted["usernames"]
        or (update.message.sender_chat and update.message.sender_chat.id in trusted["chats"])
    ):
        await context.bot.send_message(
            chat_id=OWNER_ID,
            text=(
                f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è "
                f"(–æ—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ID {sender_id or update.message.sender_chat.id})"
            ),
        )
        return True

    # --- –≤–ª–æ–∂–µ–Ω–∏—è (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã) ---
    if update.message.photo or update.message.document:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            await context.bot.send_message(
                chat_id=OWNER_ID,
                text=(
                    f"üö´ –§–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç –≤ –≥—Ä—É–ø–ø–µ {chat_id}\n"
                    f"–û—Ç: {sender_name} ({sender_username}, ID: {sender_id})\n"
                    f"–°—Ç–∞—Ç—É—Å: –£–î–ê–õ–ï–ù–û ‚úÖ"
                ),
            )
            return False
        except Exception as e:
            await context.bot.send_message(
                chat_id=OWNER_ID,
                text=f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}",
            )
            return False

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ ---
    text = update.message.text or ""
    gpt_prompt = load_prompt(PROMPT_FILE)
    is_bad = insult_detect(text, gpt_prompt) if text else False

    if is_bad:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            msg_info = (
                f"üö´ –¢–û–ö–°–ò–ß–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ\n"
                f"–ì—Ä—É–ø–ø–∞: {chat_id}\n"
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name} ({sender_username}, ID: {sender_id})\n"
                f"–¢–µ–∫—Å—Ç: {text[:500] if text else '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]'}\n"
                f"–°—Ç–∞—Ç—É—Å: –£–î–ê–õ–ï–ù–û ‚úÖ"
            )
        except Exception as e:
            msg_info = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
    else:
        msg_info = (
            f"‚úÖ –ù–û–†–ú–ê–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ\n"
            f"–ì—Ä—É–ø–ø–∞: {chat_id}\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name} ({sender_username}, ID: {sender_id})\n"
            f"–¢–µ–∫—Å—Ç: {text[:500] if text else '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]'}\n"
            f"–°—Ç–∞—Ç—É—Å: –û–°–¢–ê–í–õ–ï–ù–û üëç\n\n"
            f"üí° –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ:\n/add_user {sender_id}"
        )

    # --- –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É ---
    try:
        await context.bot.send_message(chat_id=OWNER_ID, text=msg_info)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")

    return not is_bad


# ------------------ –∫–æ–º–∞–Ω–¥—ã ------------------

async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ"""
    if update.message.chat.id != OWNER_ID:
        return

    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_user <ID>")
        return

    trusted = load_trusted_users()
    try:
        user_id = int(args[0])
        if user_id not in trusted["users"]:
            trusted["users"].append(user_id)
            if save_trusted_users(trusted):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        else:
            await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö")
    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")


def register_moderator_handlers(app):
    app.add_handler(CommandHandler("add_user", add_user))

